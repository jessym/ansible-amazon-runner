---
- name: Determine SDKMan version
  shell: |
    source ~/.sdkman/bin/sdkman-init.sh
    sdk version
  args:
    executable: /bin/bash
  ignore_errors: yes
  register: __var__
  changed_when: no

- name: Save SDKMan version
  when: __var__.stdout | regex_search('SDKMAN')
  set_fact:
    SDKMAN_VERSION: "{{ __var__.stdout | regex_search('SDKMAN ([\\d\\.]+)', '\\1') | first }}"

- name: Install SDKMan
  when: SDKMAN_VERSION is not defined
  shell: |
    curl -s "https://get.sdkman.io" | bash

- name: Determine available Java (Zulu) versions
  shell: |
    source ~/.sdkman/bin/sdkman-init.sh
    sdk ls java | awk -F '|' '{ print $6 }' | grep . | awk '{$1=$1};1' | tail -n +2 | grep zulu
  args:
    executable: /bin/bash
  register: __var__
  changed_when: no

- name: Save available Java (Zulu) versions
  set_fact:
    JAVA_VERSIONS: "{{ __var__.stdout_lines }}"

- name: Determine the preferred Java candidates
  vars:
    JAVA_CANDIDATES: []
  set_fact:
    JAVA_CANDIDATES: "{{ JAVA_CANDIDATES + [JAVA_VERSIONS | select('search', '^' + (item | string)) | list | first] }}"
  with_items: "{{ Dev.PREFERRED_JAVA_VERSIONS }}"

- name: Install the preferred Java candidates
  shell: |
    source ~/.sdkman/bin/sdkman-init.sh
    yes | sdk install java {{ item }}
  args:
    executable: /bin/bash
  register: __var__
  changed_when: "'already installed' not in __var__.stdout"
  with_items: "{{ JAVA_CANDIDATES }}"
